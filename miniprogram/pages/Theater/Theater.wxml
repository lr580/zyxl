<!--miniprogram/pages/Theater/Theater.wxml-->

<!-- <view class="cu-bar bg-white">
  <view class="action sub-title">
    <text class="text-xl text-bold text-cyan">类别</text>
    <text class="bg-cyan" style="width:2rem"></text> -->
<!-- last-child选择器-->
<!-- </view>
</view> -->
<view wx:if="{{forge}}">
    <van-transition name="slide-down" show="true" custom-class="block">
        <view class="cu-bar bg-white">
            <view class="action sub-title">
                <text class="text-xxl text-bold text-blue">视频</text>
                <text class="bg-cyan" style="width:2rem"></text>
                <!-- last-child选择器-->
            </view>
        </view>

        <scroll-view scroll-x class="bg-white nav" scroll-with-animation scroll-left="{{scrollLeft}}">
            <view class="cu-item {{index==TabCur?'text-blue cur':''}} {{index==TabCur?'text-xl':'text-xls'}} trans" wx:for="{{type_seq}}" wx:key bindtap="click_type" id="{{item}}" data-id="{{index}}">
                {{types[item]}}
            </view>
        </scroll-view>
        <view>
            <view class="cu-form-group">
                <view class="title">开启逆序排序</view>
                <switch bindchange="sele_sorttype" class="orange red sm"></switch>
            </view>
            <!-- 选择排序依据：(没得选，只有一个依据) -->
            <!-- <view wx:if="{{sort_key==0}}">
    <view bindtap="sele_sorttype" id="00">{{sort_reverse?'':'(当前)'}}按时间由近到远排序</view>
    <view bindtap="sele_sorttype" id="01">{{sort_reverse?'(当前)':''}}按时间由远到近排序</view>
  </view> -->
        </view>
    </van-transition>









    <!-- <view>搜索框区域(不保证实现本功能)</view> -->
    <!-- <view>
  选择类别：
  <view wx:for="{{type_seq}}">
    <view bindtap="click_type" id="{{item}}">
      <text wx:if="{{now_type==item}}">(当前)</text>
      <text>{{types[item]}}</text>
    </view>
  </view>
</view> -->


    <!-- <view>分割线(｀・ω・´)</view> -->
    <view class="kk"></view>
    <view bindtouchstart="touch_start" bindtouchend="touch_end" bindtouchcancel="touch_cancel" class="scroll_part" wx:if="{{num_show}}">
        <!--videolist.length-->
        <view wx:for="{{videolist}}">
            <van-transition name="slide-up">
                <view class="video_body shadow animation-scale-up" wx:if="{{num_show>index}}" bindtap="goto_video" id="{{item[5]}}">
                    <view style="width: 100%;height:100%;">
                        <image class="video_cover" src="{{item[3]}}"></image>
                    </view>
                    <view class="video_intro">
                        <view class="video_title">{{item[0]}}</view>
                        <view class="video_state">
                            <view class="video_type">
                                <image src="/img/type.png"></image>
                                <text>{{types[item[1]]}}</text>
                            </view>
                            <view class="video_count">
                                <image src="/img/count.png"></image>
                                <text>{{item[2]}}</text>
                            </view>
                        </view>
                    </view>

                </view>
            </van-transition>

        </view>
        <view class="bottom_tip" wx:if="{{num_show==videolist.length}}">
            <image src="/img/tip.png"></image>
            <text>已经到达底部啦!</text>
        </view>
    </view>
    <view class="bottom_tip" wx:else>
        <image src="/img/tip.png"></image>
        <text>暂时没有符合条件的互动视频哦~</text>
    </view>
</view>
<view wx:else>
    <view class="cu-bar bg-white">
        <view class="action sub-title">
            <text class="text-xl text-bold text-blue">知识学习</text>
            <text class="text-ABC text-blue">study</text>
            <!-- last-child选择器-->
        </view>
    </view>
    <view style="padding:30rpx">
        <view class="a">既有大小又有方向的量称为向量。对向量需要支持基础运算：加法、减法、数乘、除(除以一个数等于乘它的倒数)、点乘(内积/数量积)、叉乘(外积/向量积)、模长、范数。</view>
        <view class="a">在实现上，通常可以把向量起始点都移到坐标原点，只考虑其终点，即把向量看成单个坐标点。我们用向量的终点横纵坐标形式表示向量，而不是使用(起点+)方向+长度。</view>
        <view class="a">线段可以用两个点来表示。直线、射线可以取直线上两点表示，当作线段计算。不使用点斜式等任何涉及斜率的表达式的好处是：避免斜率零和无穷的判断。避免分类讨论。</view>
        <view class="a">极角是极坐标系内的概念，代表平面上任何一点到极点的连线和极轴的夹角叫做极角。若多边形没有任两条相邻线段斜率相等，以凸多边形任意一点为原点作极角排序，能够得到逆时针方向顺序的点集。</view>
        <view class="a">平面上能包含所有给定点的周长最小的凸多边形是凸包。</view>
        <view class="a">字典树有根有向树。记根节点为 1，每条边是一个字符，从根节点开始的任一条路径代表一个子串，到叶子节点的路径就是完整字符串。一般来说，节点会存一个整数变量，意义即当前前缀能匹配到多少个字符串。如果每个输入字符串不重复，这个值就是叶子结点数。</view>
        <view class="a">判断代码是否会超时，即判断这份代码在最差情况(使得执行次数最大的数据点)下基本语句执行次数会不会超过限制。由于直接计算执行次数非常复杂，这样对代码量大的程序计算量太大了。所以考虑在不明显影响计算结论的情况下，对计算进行简化。</view>
        <view class="a">一般来说，只考虑平均和最差，并且通常题目测试点总会有能产生最差复杂度的数据，所以应保证最差复杂度也能过题。下面计算复杂度默认约定为最差复杂度。</view>
        <view class="a">计算空间复杂度，即把全部变量(主要是数组)的大小的表达式求出来，算其复杂度。</view>
        <view class="a">数学推理，即利用各种初等和高等数学知识，对所要求的内容进行化简，从而降低复杂度。通过推理、猜想、小数据暴力打表(写程序或手算均可)等方法寻找规律。该方法通常不严谨，且有可能会漏特判或找出错误的规律。在数学、博弈论等题目常用。</view>
        <view class="a">如果系数常数比较大，仍有 TLE / MLE 的风险，这时候可以适当优化代码，在常数层面提高代码的运行速度。</view>
        <view class="a">在满足均匀分布、互相独立等统计学特征随机数列里任取一个元素，该元素称为随机数。用计算机生成的满足上述统计学特征的数称为伪随机数(下文简称为随机数)。</view>
        <view class="a">随机化有时是题目的正解、或者是正解的一部分，有时是不错的骗分技巧。注意随机化的复杂度不一定比非随机化更优。具体需要分析。</view>
        <view class="a">在之前的课程里，提到过一种随机搜索的方法：蒙特卡罗法。这里再介绍一种新的随机搜索方法——模拟退火，以及它的前身：爬山算法。爬山算法通常不是随机化算法。将爬山算法引入熵值随机化后的算法称为模拟退火。</view>
        <view class="a">考虑到爬山会陷入局部最优解。这时引入随机化来尽可能解决这个问题。当一个问题的方案数量极大（甚至是无穷的）而且不是一个单峰函数时，我们常使用模拟退火求解。爬山算法对于一个当前最优解附近的非最优解，爬山算法直接舍去了这个解。而很多情况下，我们需要去接受这个非最优解从而跳出这个局部最优解。而珂朵莉树只要是有区间赋值操作的数据结构题都可以用来骗分。在数据随机的情况下一般效率较高，但在不保证数据随机的场合下，会被精心构造的特殊数据卡到超时。</view>
    </view>
</view>